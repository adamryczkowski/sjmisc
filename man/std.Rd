% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/std.R
\name{std}
\alias{center}
\alias{std}
\title{Standardize and center variables}
\usage{
std(x, ..., include.fac = TRUE, suffix = "_z")

center(x, ..., include.fac = TRUE, suffix = "_c")
}
\arguments{
\item{x}{A vector or data frame.}

\item{...}{Optional, unquoted names of variables. Required, if \code{x} is
a data frame (and no vector) and only selected variables
from \code{x} should be processed. See 'Examples'.}

\item{include.fac}{Logical, if \code{TRUE}, factors will be converted to numeric
vectors and also standardized or centered.}
}
\value{
A vector with standardized or centered variables. If \code{x} is a
        data frame, only the transformed variables will be returned.
}
\description{
\code{std()} computes a z-transformation (standardized and centered)
             on the input. \code{center()} centers the input.
}
\note{
\code{std()} and \code{center()} only return a vector, if \code{x} is
        a vector. If \code{x} is a data frame and only one variable is specified
        in the \code{...}-ellipses argument, both functions do return a
        data frame (see 'Examples').
}
\examples{
library(dplyr)
data(efc)
std(efc$c160age) \%>\% head()
std(efc, e17age, c160age) \%>\% head()

center(efc$c160age) \%>\% head()
center(efc, e17age, c160age) \%>\% head()

# NOTE!
std(efc$e17age) # returns a vector
std(efc, e17age) # returns a tibble

# works with mutate()
efc \%>\%
  select(e17age, neg_c_7) \%>\%
  mutate(age_std = std(e17age), burden = center(neg_c_7)) \%>\%
  head()

}

