% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spread_coef.R
\name{spread_coef}
\alias{spread_coef}
\title{Spread model coefficients of nested data frames into columns}
\usage{
spread_coef(data, model.column, model.term, ...)
}
\arguments{
\item{data}{A nested data frame with a list-variable that contains fitted
model objects (see 'Details').}

\item{model.column}{Name or index of the list-variable that contains the
fitted model objects.}

\item{model.term}{Optional, name of a model term. If specified, only this model
term (including p-value) will be extracted from each model and
added as new column.}

\item{...}{Other arguments passed down to the \code{\link[broom]{tidy}}-function.}
}
\value{
\code{data}, with new columns for each coefficients of the models
          that are stored in the list-variable; or, if \code{model.term} is given,
          with two new columns (one for the term's estimate value and one
          for the related p-value).
}
\description{
This function extracts the coefficients of fitted model objects
             from nested data frames and spreads the coefficients into
             new colummns.
}
\details{
This function requires a nested data frame, as created by the
           \code{\link[tidyr]{nest}}-function of the \pkg{tidyr}-package,
           where several fitted models are saved in a list-variable (see
           'Examples'). As nested data frames with fitted models as list-variable
           are typically fit with an identical formula, all models have the same
           dependent and independent variables and only differ in their
           subsets of data. The function then extracts all coefficients from
           each model and saves each estimate in a new column. The result
           is a data frame, where each \emph{row} is a model with each
           each model's \emph{coefficient} in an own column.
}
\examples{
library(tidyr)
library(dplyr)
data(efc)

# create nested data frame, grouped by dependency (e42dep)
# and fit linear model for each group. These models are
# stored in the list variable "models".
model.data <- efc \%>\%
  filter(!is.na(e42dep)) \%>\%
  group_by(e42dep) \%>\%
  nest() \%>\%
  mutate(models = lapply(data, function(x) {
    lm(neg_c_7 ~ c12hour + c172code, data = x)
  }))

# spread coefficients, so we can easily access and compare
# the coefficients over all models
spread_coef(model.data, "models")

# select only specific model term
spread_coef(model.data, "models", "c12hour")

# spread_coef can be used directly within a pipe-chain
efc \%>\%
  filter(!is.na(e42dep)) \%>\%
  group_by(e42dep) \%>\%
  nest() \%>\%
  mutate(models = lapply(data, function(x) {
    lm(neg_c_7 ~ c12hour + c172code, data = x)
  })) \%>\%
  spread_coef("models")

}

